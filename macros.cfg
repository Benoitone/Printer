[include macros_pre_release.cfg]

[gcode_macro PARK_CLEAN]
description: Park the toolhead at the back safe before move nozzle to remove stringing
gcode:
    {% set E = params.E|default(1.7)|float %}

    {% set Px, Py = printer["gcode_macro _USER_VARIABLES"].park_position_xy|map('float') %}
    {% set park_lift_z = printer["gcode_macro _USER_VARIABLES"].park_lift_z %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}

    {% if Px >= max_x - 15 %}
        {% set Px_safe = max_x - 15 %}
    {% elif Px < max_x - 15 %}
        {% set Px_safe = Px %}
    {% endif %}
    {% if Py >= max_y - 15 %}
        {% set Py_safe = Py - 15 %}
    {% elif Py < max_y %}
        {% set Py_safe = Py %}
    {% endif %}
    {% set z_safe = act_z + park_lift_z %}
    {% if z_safe > max_z %}
        {% set z_safe = max_z %}
    {% endif %}

    # retract filament before move up toolhead
    {% if printer.extruder.temperature > 185 and firmware_retraction_enabled %}
        G10
    {% endif %}
    G90
    G1 Z{z_safe} F{Sz}

    G0 X{Px_safe} Y{Py_safe} F{St}

[gcode_macro MAINTENANCE]
gcode:
    {% set x_maint = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_maint = printer.toolhead.axis_minimum.y|float + 15 %}
    {% set z_maint = printer.toolhead.axis_maximum.z|float - 100 %}
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 40 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    M117 maintenance
        # 1 ----- HOMING -------------------
        # Home if not already homed
    _CG28
    SAVE_GCODE_STATE NAME=Maintenance
        # 2 ----- MOVE TO FRONT CENTER -----
    G90
    G1 Z{z_maint} F{Sz}		#G1 Z140 F2400
    G90
    G0 X{x_maint} Y{y_maint} F{St}	#G0 X148 Y15 F10000
    G91
    RESTORE_GCODE_STATE name=Maintenance
    M117 Maintenance

[gcode_macro MOVE_TO_MIDDLE_BED]
gcode:
    {% set x_ct = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_ct = printer.toolhead.axis_maximum.y|float / 2 %}
    {% set z_ct = printer.toolhead.axis_minimum.z|float + 30 %}
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 40 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
        # 1 ----- HOMING ------------------
        # Home if not already homed
    _CG28
    SAVE_GCODE_STATE NAME=Middle_bed
        # 2 ----- MOVE TO CENTER ----------
    G90
    G1 Z{z_ct} F{Sz}
    G90
    G1 X{x_ct} Y{y_ct} F{St}
    G91
    RESTORE_GCODE_STATE name=Middle_bed


## Start - Macros to turn off the caselight during printing...
[gcode_macro _USER_VARIABLES]
variable_caselight_off_layer_enabled = True
variable_caselight_off_layer_height = 2

[gcode_macro _RESET_LAYER_GCODE]
description: Clears scheduled gcode commands and state for all layers.
  Usage: _RESET_LAYER_GCODE
gcode:
  SET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"

[gcode_macro STOP_CASELIGHT_LAYER_CHANGE]
description: Stop case light at the define layer.
  Usage: STOP_CASELIGHT_LAYER_CHANGE LAYER=
gcode:
    {% set cur_layers = printer.print_stats.info.current_layer|int %}
    {% set caselight_off_layer_height = params.LAYER|default(printer["gcode_macro _USER_VARIABLES"].caselight_off_layer_height)|int %}

    {% if printer['gcode_macro _USER_VARIABLES'].caselight_off_layer_enabled %}
        {%if cur_layers > caselight_off_layer_height %}
            SET_CASELIGHT_LEDS_OFF
        {% endif %}
    {% endif %}
## END - ...Macros to turn off the caselight during printing


## Start - Macros to control caselight...
[gcode_macro SET_CASELIGHT_LEDS_ON]
gcode:
    {% set transmit = params.TRANSMIT|default(1) %}

    {% if printer["gcode_macro _USER_VARIABLES"].status_leds_caselight_enabled %}
        {% set color_name = params.COLOR|default('on')|lower %}
        _SET_ALLLEDS_BY_NAME LEDS="caselight" COLOR={color_name} TRANSMIT=1
    {% elif printer["gcode_macro _USER_VARIABLES"].light_enabled %}
        LIGHT_ON
    {% endif %}

[gcode_macro SET_CASELIGHT_LEDS_OFF]
gcode:
    {% set transmit = params.TRANSMIT|default(1) %}

    {% if printer["gcode_macro _USER_VARIABLES"].status_leds_caselight_enabled %}
        _SET_ALLLEDS_BY_NAME LEDS="caselight" COLOR="off" TRANSMIT={transmit}
    {% elif printer["gcode_macro _USER_VARIABLES"].light_enabled %}
        LIGHT_OFF
    {% endif %}
## END - ...Macros to control caselight

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}


[gcode_macro SEARCH_VARS]
description: Search for variables in the "printer" object from Klipper
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

# This macro will allow you to type search_vars s={some word} from the terminal and
# it will respond with all of the matching items in the printer Object.
# Say I wanted to know what the name and path of for the value of the currently loaded bed
# mesh. I could do type search_vars s=profile in my terminal and it will respond with 
# any items containing the word ‘profile’.
# 
#   $ SEARCH_VARS s="profile"
#   // printer.bed_mesh.profile_name : default
# 
[gcode_macro SEARCH_VARS2]
# Search like 'SEARCH_VARS s="profile"'
gcode:
    {% if not params.S %}
        {action_respond_info("hmm.. try 'SEARCH_VARS s=\"profile\"'")}
    {% else %}
        {% set resultcount = namespace(total=0) %}
        {% set search = params.S|lower %}
        {% set ns = namespace() %}
        {% for item in printer  %}
            {% if ' ' in item %}
                {% set ns.path = ['printer', "['%s']" % (item), ''] %}
            {% else %}
                {% set ns.path = ['printer.', item, ''] %}   
            {% endif %} 
    
            {% if search in ns.path|lower %}
                { action_respond_info(ns.path|join) }
                {% set resultcount.total = 1 + resultcount.total %}
            {% endif %} 
    
            {% if printer[item].items() %}
                {% for childkey, child in printer[item].items() recursive %}
                    {% set ns.path = ns.path[:loop.depth|int + 1] %}
    
                    {% if ' ' in childkey %}
                        {% set null = ns.path.append("['%s']" % (childkey)) %}
                    {% else %}
                        {% set null = ns.path.append(".%s" % (childkey)) %}
                    {% endif %} 
    
                    {% if child is mapping  %}
                        { loop(child.items()) }
                    {% else %}
                        {% if search in ns.path|lower %}
                            { action_respond_info("%s : %s" % (ns.path|join, child)) }
                            {% set resultcount.total = 1 + resultcount.total %}
                        {% endif %} 
                    {% endif %} 
                    
                {% endfor %}
            {% endif %} 
        {% endfor %}
        {% if resultcount.total >= 1 %}
            {action_respond_info("found \"" + params.S + "\" " + resultcount.total|string +" times.")}
        {% else %}
            {action_respond_info("\"" + params.S + "\" not found.")}
        {% endif %} 
        {% set resultcount.total = 0|int %}
    {% endif %}

#####################################################################
#  Macros to debug the printer variable
#####################################################################
# Use:
# - DUMP_PARAMETER                       print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# - DUMP_PARAMETER C='printer'           print the defined config values
# - DUMP_PARAMETER S='printer'           print the defined settings values
[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C 
           else 'settings' if params.S %}
  {% set search = params.C if params.C
             else params.S if params.S
             else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
    {% if config %} ; print the searched printer.configfile[path] parameter
      {% if name1 is in ['configfile'] %}
        {% for name2 in printer[name1][path]|sort %}
          {% if name2 is in [search] %}
            {% for name3, value in printer[name1][path][name2].items()|sort %}
              {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                          (path, name2, name3, value)) %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% else %}
      {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
        {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {% if out|length > 0 %}
    {action_respond_info(out|join("\n"))}
  {% else %}
    {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}

[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area
gcode:
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
                         'y' : printer.configfile.settings.probe.y_offset} %}
  {% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
                                'y' : [min.y,(min.y-probe_offset.y)]|max},
                       'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
                                'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
  {action_respond_info("Print Volume Limits:
                        Min X:%7.1f, Y:%7.1f, Z:%7.1f
                        Max X:%7.1f, Y:%7.1f, Z:%7.1f
                        Probe Area Limits:
                        Min X:%7.1f, Y:%7.1f
                        Max X:%7.1f, Y:%7.1f" % 
    (min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}

#####################################################################
#  Macros needed for several debug activities
#####################################################################

## Use:
##   - DUMP_CONFIG S='printer'
[gcode_macro DUMP_CONFIG]
description: Debug: Print the selected entrie of the printer config object
gcode:
    {% if 'S' in params %}
        {% set parameters = [] %}
        {% for name1 in printer.configfile.config %}
            {% if name1 is in [params.S] %}
                {% for name2 in printer.configfile.config[name1]|sort %}
                    {% set parameters = parameters.append("printer.configfile.config['%s'].%s = %s" % (name1, name2, printer.configfile.config[name1][name2])) %}
                {% endfor %}
            {% endif %}
        {% endfor %}
        action_respond_info(parameters|join("\n"))}
    {% else %}
        {action_respond_info("WARNING: parameter S needed call e.g. DUMP_CONFIG S='printer'")}
    {% endif %}

## Use:
##   - DUMP_WARNINGS
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for name1 in printer.configfile.warnings %}
        {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (name1.type, name1.section, name1.option, name1.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}

## Use:
##   - DUMP_SETTINGS S='printer'
[gcode_macro DUMP_SETTINGS]
description: Debug: Print the selected entrie of the printer settings object
gcode:
    {% if 'S' in params %}
        {% set parameters = [] %}
        {% for name1 in printer.configfile.settings %}
            {% if name1 is in [params.S] %}
                {% for name2 in printer.configfile.settings[name1]|sort %}
                    {% set parameters = parameters.append("printer.configfile.settings['%s'].%s = %s" % (name1, name2, printer.configfile.settings[name1][name2])) %}
                {% endfor %}
            {% endif %}
        {% endfor %}
        {action_respond_info(parameters|join("\n"))}
    {% else %}
        {action_respond_info("WARNING: parameter S needed call e.g. DUMP_SETTINGS S='printer'")}
    {% endif %}

#####################################################################
#  Macros needed for several debug activities
#####################################################################

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED




# ## adaptive Heat soak
# # version: 2.0
# # changelog :
# #   -V 1.0 : adaptive bed soak initial release
# #   -V 2.0 : adaptive heatsoak for bed, chamber, extruder, Async mode only (can be use only while Printing)

# # Note :
# # These macros intents to set heaters taregt adapt heat soak of 3D printer and use bed power stability to 
# # determine best soak duration. It was design for a Voron 2.4 300 mm printer

# # Installation :
# #  copy heatsoak.cfg in your config folder, add an include [include <YOUR_PATH/heatsoak.cfg] in
# #  your printer.cfg
# #  In order to benefit of the async mod you need to modify/override RESUME ans CANCEL_PRINT macros
# # RESUME and CANCEL should be like this

# #  [gcode_macro RESUME]
# #  rename_existing: RESUME_BASE
# #  gcode:
# #    {% if printer.pause_resume.is_paused %}
# #     {% if printer['gcode_macro HEATSOAK'].soak_pending %}
# #      _HEATSOAK_NEXT
# #     {% else %}
# #      ... YOUR CODE HERE ...
# #      RESUME_BASE
# #     {% endif %}
# #    {% endif %}

# #  [gcode_macro CANCEL_PRINT]
# #  rename_existing: CANCEL_BASE
# #  gcode:
# #     _HEATSOAK_CANCEL
# #     ... YOUR CODE HERE ...
# #     CANCEL_BASE

# # Usage:
# # WARNING : HEATSOAK MUST NOT BE INCLUDED IN PRINT_START MACRO
# # As it uses PAUSE/RESUME sequence it would yield to unpredictible behavior if included in start_print
# # Your slicer start_gcode should be like this

# # e.g Superslicer
# #   HEATSOAK BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP={first_layer_temperature[initial_extruder]+extruder_temperature_offset[initial_extruder]-40} CHAMBER_TEMP=[chamber_temperature]
# #   PRINT_START <YOUR_STUFF>

# #  If you need some actions to be done before heatsoak put its in another macro
# # e.g.
# #    PREFLY
# #    HEATSOAK <blahblahblah>
# #    PRINT_START <blahblahblah>

# # The Heatsoak sequence is defined in _USER_VARIABLES macro (see example below)
# # ! IMPORTANT ! : Set the sensor values according to your printer configuration

# # The order of sequence can be changed or removed but setting bed_power before bed_temp could be funny XD
# # available sequence items :
# #   bed_temp : set bed heater target temperature and wait to reach it
# #   chamber_temp : wait to reach target temperature
# #   extruder_temp :  set extruder target temperature and wait to reach it
# #   bed_power : wait for PWM statbility (Experimental)
# #   timer : wait for X minutes
# # Item can be used only once

# # hs_sequence
# [gcode_macro _User_Variables]
# variable_hs_sequence: {
                    # 'bed_temp':{'sensor': 'heater_bed', 'offset_temp': 3},
                    # 'bed_power':{},
                    # 'chamber_temp':{'sensor': 'temperature_sensor chamber'},
                    # 'extruder_temp':{'sensor': 'extruder'}
                    # }
# gcode:

# [gcode_macro HEATSOAK]
# description: Printer warmup sequence
# variable_interval: 2
# variable_soak_pending: False
# variable_soak:  {'current_seq': 0,
                # 'reached' : False }
# variable_current_timer: 0
# variable_total_timer:0
# gcode:
    # {% set _uv = printer['gcode_macro _User_Variables'] %}
    # {% set _= soak.update({'timeout' : params.TIMEOUT|default(30)|int }) %} #Timeout can be set in Params Entries or hs_sequence object, default 30 min

    # {% if not soak_pending %}

        # # from file: put the printer in pause mode, let you interact with print or resume/cancel soak
        # {% if printer.virtual_sdcard.file_position > 0 %}
            
        # # Copy Entry parameters in hs_sequence object
            # {% set _= soak.update({'current_seq': 'start','reached': True}) %}
            # {% for param in _uv.hs_sequence %}
                    # {% set _= _uv.hs_sequence[param].update({'target' : params[param|upper]|default(0)|float}) %}
            # {% endfor %}
            # SET_GCODE_VARIABLE MACRO=_User_Variables VARIABLE=hs_sequence VALUE="{ _uv.hs_sequence|string }"

        # # Start Heat soak sequence
            # SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak_pending VALUE=True #HEATSOAK status, prevent to call it twice
            # UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMER DURATION=1  #Start timer. it runs as long as soak_pending=true
        
            # _RESPOND STATUS=heating MSG="Entering heatsoak !" 

            # _HEATSOAK_INTERRUPT # initiate "LOOP" 
            
            # {% if not printer.pause_resume.is_paused %}
                # G4 P1000 # Let time to Moonraker to catch printing status FIXED : 10/03/2022
                # {% if printer.z_thermal_adjust %}
                    # SET_Z_THERMAL_ADJUST ENABLE=0
                # {% endif %}
                
                # # Pause printer with Klipper PAUSE command
                # {% if printer.configfile.settings['gcode_macro pause'] is defined %}
                    # {printer.configfile.settings['gcode_macro pause'].rename_existing }
                # {% else %}
                    # PAUSE
                # {% endif %}

            # {% endif %}    
        # {% else %}
        # # from macro: throw error
            # {action_raise_error("HEATSOAK MUST be run in Print mode")}

        # {% endif %}
    # {% endif %}

# # Wait bed reach target temperature (Async, can be interrupt)
# [delayed_gcode _HEATSOAK_CHECK]
# gcode:
    # {% set _hs = printer['gcode_macro HEATSOAK'] %}
    # {% if _hs.soak_pending %}
        # {% if _hs.soak.reached %}
            # _HEATSOAK_INTERRUPT
        # {% else %}
            # UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION={_hs.interval}
            # {% if printer['gcode_macro _' + _hs.soak.current_seq] is defined %}
            # _{_hs.soak.current_seq}   
            # {% else %}
                # { action_raise_error('_%s does not exist' % (_hs.soak.current_seq)) }
            # {% endif %}
        # {% endif %}
    # {% endif %}

# [delayed_gcode _HEATSOAK_TIMEOUT]
# gcode:
    # _HEATSOAK_NEXT

# # Heatsoak next phase interrupt phase
# [gcode_macro _HEATSOAK_NEXT]
# gcode:
    # {% set _hs = printer['gcode_macro HEATSOAK'] %}
    # {% if _hs.soak_pending %}
        
        # SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=total_timer VALUE={_hs.total_timer + _hs.current_timer}
        # SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=current_timer VALUE=0
        # _RESPOND MSG="{ "%s duration : %smin %ss" % (params.NAME|default(_hs.soak.current_seq),(_hs.current_timer/60)|int,(_hs.current_timer%60)|int) }"
        
        # {% set _=  _hs.soak.update({'reached': True}) %}
        # SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak VALUE="{_hs.soak|string}"
        # UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0.1
    # {% endif %}
    
# #  Heatsoak wait interruption (async)
# [gcode_macro _HEATSOAK_INTERRUPT]
# gcode:
    # {% set _hs_sequence =  printer['gcode_macro _User_Variables'].hs_sequence %}
    # {% set _hs = printer['gcode_macro HEATSOAK'] %}
    
    # {% if _hs.soak_pending %}

        # UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION=0 #Cancel timeout action
        # {% for seq in _hs_sequence %}
            # {% if _hs.soak.reached %} #Check if soak is reached to avoid misscall
                # {% if seq == _hs.soak.current_seq or _hs.soak.current_seq == 'start' %}
                
                # # Exit Heatsoak : Last item target reached 
                    # {% if loop.last and _hs.soak.current_seq != 'start'%}
                        # # Use Klipper resume command

                        # _RESPOND MSG="{"HEATSOAK Total duration : %smin %ss" % (((_hs.total_timer)/60)|int,((_hs.total_timer)%60)|int) }"
                        # {% if printer.configfile.settings['gcode_macro resume'] is defined %}
                            # {printer.configfile.settings['gcode_macro resume'].rename_existing }
                        # {% else %}
                            # RESUME
                        # {% endif %}

                        # {% if printer.z_thermal_adjust %}
                            # SET_Z_THERMAL_ADJUST ENABLE=1
                        # {% endif %}

                        # #Reset parameters
                        # _HEATSOAK_CANCEL

                # # Continue Heatsoak : previous item target reached    
                    # {% else %}
                        # # Set next sequence
                        # {% set _=  _hs.soak.update({'current_seq' : seq if _hs.soak.current_seq == 'start' else loop.nextitem, 'reached': False}) %}
                        # {% if printer['gcode_macro _' + _hs.soak.current_seq|string + '_reset'] is defined %}
                            # _{_hs.soak.current_seq}_reset
                        # {% endif %}
                        # {% if _hs.soak.current_seq == 'timer' %}
                            # _RESPOND MSG='HEATSOAK: Sequence `timer` for {_hs_sequence.timer.target} min'
                        # {% else %}
                            # _RESPOND MSG='HEATSOAK: Sequence `{_hs.soak.current_seq}` for max {_hs_sequence[_hs.soak.current_seq].timeout|default(_hs.soak.timeout)} min'
                        # {% endif %}
                        
                        # UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION={_hs_sequence[_hs.soak.current_seq].timeout|default(_hs.soak.timeout)*60}  # Set Timeout

                    # {% endif %} 
                # {% endif %}
            # {% endif %}
        # {% endfor %}
        # SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak VALUE="{_hs.soak|string}"
        # UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0.1
    # {% endif %}

# # Cancel bedsoak (async only)
# [gcode_macro _HEATSOAK_CANCEL]
# gcode:
    # SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=soak_pending VALUE=False
    # SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=current_timer VALUE=0
    # SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=total_timer VALUE=0
    # UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0
    # UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION=0
    # UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMER DURATION=0

# #Set heater temperature/wait temp
# [gcode_macro _wait_temp]
# gcode:
    # {% set _hs = printer['gcode_macro HEATSOAK'] %}
    # {% set _hs_seq = printer['gcode_macro _User_Variables'].hs_sequence[_hs.soak.current_seq] %}
    
    # # if heater detected set temperature
    # {% if printer[_hs_seq.sensor].target is defined %}
        # {% if printer[_hs_seq.sensor].target != _hs_seq.target and _hs_seq.target != 0 %}
            # SET_HEATER_TEMPERATURE HEATER='{_hs_seq.sensor}' TARGET={_hs_seq.target}
        # {% endif %}
    # {% endif %}

    # # check if temperature if reached
    # {% if printer[_hs_seq.sensor].temperature >= _hs_seq.target|default(0)|int - _hs_seq.offset_temp|default(0)|int %}
        # _HEATSOAK_NEXT
    # {% else %}
        # _RESPOND VERBOSE=True MSG="{_hs.soak.current_seq}/target {printer[_hs_seq.sensor].temperature}/{_hs_seq.target}"
    # {% endif %}


# [gcode_macro _bed_temp]
# gcode:
    # _wait_temp

# # Compute smoothed quadratic derivative of bed_power
# # based on Savitzky-Golay algorithm
# [gcode_macro _bed_power]
# # Below are experimental values DO NOT TOUCH
# variable_min_vals: 15 #Min buffer length
# variable_max_vals: 63 #Max buffer length
# variable_buffer: []   #stored power values
# variable_d: {'val': 100,'stable': 0}
# variable_stability: 7.3E-6 
# variable_stability_times: 4
# gcode:

    # {% if printer['gcode_macro HEATSOAK'].soak_pending %}

        # # Populate buffer
        # {% set pow= printer.heater_bed.power|float %}
        # {% set _= buffer.append(pow) %}
        # {% if buffer|length > max_vals %}
            # {% set _= buffer.pop(0) %}
        # {% endif %}

        # {% if buffer|length > min_vals %} 
            # {% set _=d.update({'val':0}) %}
        # # normalize sample (size should be odd number)
            # {% set half_window = ((buffer|length -1 )/2)|int %}
            # {% set window_size = half_window*2 +1 %}
            # {% set inc = 1 - (buffer|length % 2) %}  # 0 for odd, 1 for even
            # {% set norm = (window_size -1 ) * window_size * (window_size + 1) * printer['gcode_macro HEATSOAK'].interval %}  # Normalization factor

        # # Compute Smoothed Quadratic derivative of center value
            # {% for i in range(window_size) %}
                # {% set _=d.update({'val':0 + d.val + buffer[i + inc]*(i-half_window)/norm}) %}
            # {% endfor %}

            # _RESPOND VERBOSE=True MSG="Bed power variation {"%.2f" % (d.val*6000)}%/min, nb of samples: {window_size}" 
        # {%endif %}
        
        # # Test if stability is reached (4 times under "stability")
        # {% if d.val|abs < stability %}
            # {% set _=d.update({'stable': (d.stable + 1)}) %}
            # {% if d.stable >= stability_times %}
                                
                # _RESPOND MSG="Bed power stabilized {d.val*6000}%/min"
                # _HEATSOAK_NEXT
                
            # {% endif %}
        # {% else %}
            # #reset stabilized sample count
            # {% set _=d.update({'stable': 0}) %}
        # {% endif %}   
        
    # {% endif %}

# [gcode_macro _chamber_temp]
# gcode:
    # _wait_temp

# [gcode_macro _extruder_temp]
# gcode:
    # _wait_temp

# [gcode_macro _timer]
# gcode:
    # {% set _hs = printer['gcode_macro HEATSOAK'] %}
    # {% set _hs_seq = printer['gcode_macro _User_Variables'].hs_sequence[_hs.soak.current_seq] %}
    # UPDATE_DELAYED_GCODE ID=_HEATSOAK_CHECK DURATION=0
    # UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMEOUT DURATION={_hs_seq.target*60}

# # reset _bed_power variables
# [gcode_macro _bed_power_reset]
# gcode:
    # SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=buffer VALUE='[]'
    # SET_GCODE_VARIABLE MACRO=_bed_power VARIABLE=d VALUE='{ {'val': 100, 'duration': 0, 'stable': 0}|tojson|string }'

# # Heatsoak Timer
# [delayed_gcode _HEATSOAK_TIMER]
# gcode:
    # SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=current_timer VALUE={printer['gcode_macro HEATSOAK'].current_timer|int + 1 }
    # {% if printer['gcode_macro HEATSOAK'].soak_pending %}
        # UPDATE_DELAYED_GCODE ID=_HEATSOAK_TIMER DURATION=1
    # {% endif %}