# [board_pins]
# aliases:
	# # EXP1 header
	# EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
	# EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>
	# # SPI1 header
	# SPI1_1=<5V>,  SPI1_3=PA4, SPI1_5=PA7, SPI1_7=<3.3v>,
	# SPI1_2=<GND>, SPI1_4=PA5, SPI1_6=PA6, SPI1_8=<GND>
	# # Pins SPI1_3, SPI1_4, SPI1_5, SPI1_6 are also NSS, CLK, MOSI, MISO of bus "SPI1"

[display]
#    FYSETC mini12864 LCD Display v2.1
lcd_type: uc1701
cs_pin: PB8
a0_pin: PD6
rst_pin: PB9
spi_software_sclk_pin: PA5
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
encoder_pins: ^PA9,^PA10
click_pin: ^!PB5
menu_timeout = 15
contrast: 63
display_group = __voron_display

[neopixel neo_display]
#    To control Neopixel RGB in mini12864 display
pin: PA15
chain_count: 3
initial_RED: 1.0
initial_GREEN: 0.4
initial_BLUE: 0.0
color_order: RGB

[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=neo_display RED=1 GREEN=0.4 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=3 

[include splash.cfg]


# [duplicate_pin_override]
# pins: EXP1_2


# [gcode_button click_button_display]
# pin: ^!EXP1_2
# press_gcode:
  # {% if printer.menu.running|lower == 'false' %}
    # _DISPLAY_ON
  # {% endif %}
# release_gcode:
  # {% if printer.menu.running|lower == 'false' %}
    # UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  # {% endif %}

#####################################################################
# 	Glyph
#####################################################################
[display_glyph chamber]
data:
  ................
  ****************
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...********...*
  *...*......*...*
  *...*......*...*
  *...*......*...*
  ****************
  ................
    
[display_glyph bed]
data:
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ...**********...
  ..*..........*..
  .*............*.
  *..............*
  ****************
  ................

[display_glyph bed_heat1]
data:
  ................
  ......*...*.....
  ......*...*.....
  .....*...*......
  .....*...*......
  ......*...*.....
  ......*...*.....
  .....*...*......
  .....*...*......
  ................
  ...**********...
  ..*..........*..
  .*............*.
  *..............*
  ****************
  ................

[display_glyph bed_heat2]
data:
  ................
  .....*...*......
  .....*...*......
  ......*...*.....
  ......*...*.....
  .....*...*......
  .....*...*......
  ......*...*.....
  ......*...*.....
  ................
  ...**********...
  ..*..........*..
  .*............*.
  *..............*
  ****************
  ................

[display_glyph extruder1]
data:
  ..************..
  ..************..
  ......****......
  ....********....
  ....********....
  .....******.....
  ......****......
  .......**.......
  ................
  ..*******.......
  .*..............
  .*..............
  ..************..
  ..............*.
  ..............*.
  .......*******..

[display_glyph extruder2]
data:
  ..************..
  ..************..
  ......****......
  ....********....
  ....********....
  .....******.....
  ......****......
  .......**.......
  ................
  .......**.......
  ................
  ................
  ................
  ................
  ................
  ................

[display_glyph extruder3]
data:
  ..************..
  ..************..
  ......****......
  ....********....
  ....********....
  .....******.....
  ......****......
  .......**.......
  ................
  ..*******.......
  .*..............
  .*..............
  ..******........
  ................
  ................
  ................

[display_glyph voron]
data:
    1111111001111111
    1111100000011111
    1111000000001111
    1100000000000011
    1000001100110001
    1000011001100001
    1000110011000001
    1001100110000001
    1000000110011001
    1000001100110001
    1000011001100001
    1000110011000001
    1110000000000111
    1111000000001111
    1111100000011111
    1111111001111111

[display_glyph voroninv]
data:
    0000001110000000
    0000111111100000
    0001111111110000
    0111111111111100
    1111100111001110
    1111001110011110
    1110011100111110
    1100111001111110
    1111110011100110
    1111100111001110
    1111001110011110
    1110011100111110
    0111111111111100
    0001111111110000
    0000111111100000
    0000001110000000

[display_glyph gclock]
data:
  ................
  .....******.....
  ....*..**..*....
  ...*........*...
  ..*........*.*..
  .*...*....*...*.
  .*....*..*....*.
  .**....**....**.
  .**....**....**.
  .*............*.
  .*............*.
  ..*..........*..
  ...*........*...
  ....*..**..*....
  .....******.....
  ................


[display_glyph rclock]
data:
  ................
  ...**********...
  ..************..
  ..************..
  ...**********...
  ....********....
  .....******.....
  ......****......
  ......****......
  .....*....*.....
  ....*......*....
  ...*........*...
  ..*..........*..
  ..*..........*..
  ...**********...
  ................

[display_glyph rclock1]
data:
  ................
  ...**********...
  ..************..
  ..************..
  ...**********...
  ....********....
  .....******.....
  ......****......
  ......****......
  .....*.**.*.....
  ....*..**..*....
  ...*...**...*...
  ..*....**....*..
  ..*...****...*..
  ...**********...
  ................

[display_glyph rclock2]
data:
  ................
  ...**********...
  ..************..
  ..************..
  ...**********...
  ....********....
  .....******.....
  ......****......
  ......****......
  .....*.**.*.....
  ....*..**..*....
  ...*...**...*...
  ..*...****...*..
  ..*.********.*..
  ...**********...
  ................

    
#####################################################################
# 	Display Data
#####################################################################
[display_data __voron_display chamber]
position: 2, 0
text:
  {% if ('temperature_sensor chamber' in printer) and (not 'temperature_sensor frame' in printer)  %}
		{% set chamber = printer['temperature_sensor chamber'] %}
		~chamber~ { "%2.0f" % (chamber.temperature,) }~degrees~
	{% endif %}
    {% if ('temperature_sensor chamber' in printer) and ('temperature_sensor frame' in printer)  %}
		{% set chamber = printer['temperature_sensor chamber'] %}
    {% set frame_temp = printer['temperature_sensor frame'] %}
    ~chamber~ { "%2.0f" % (chamber.temperature,) }/{ "%2.0f" % (frame_temp.temperature,) }~degrees~
	{% endif %}


[display_template _extruder_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "extruder" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 3) + 1 %}
        ~extruder{frame}~
      {% else %}
        ~extruder~
      {% endif %}
    {% endif %}
    { "%3.0f" % (heater.temperature,) }
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}


[display_template _heater_bed_temperature]
param_heater_name: "heater_bed"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% endif %}
    { "%3.0f" % (heater.temperature,) }
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}


[display_data __voron_display extruder]
position: 0, 0
text: { render("_extruder_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_heater_bed_temperature", param_heater_name="heater_bed") }


#####################################################################
# 	Time
#####################################################################
[display_data __voron_display print_progress]
position: 3, 0
text:
    {% if printer.display_status.message %}
      { "" }
    {% else %}
      { "{:^18.0%}".format(printer.display_status.progress) }
    {% endif %}


[display_data __voron_display progress_bar]
position: 2, 9
text:
    {% set ptime = printer["gcode_macro M73"].r %}
    {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
    {% if ptime==0 %}
      ~rclock~
    {% else %}
      ~rclock{frame}~
    {% endif %}
    { "%02d:%02d" % (ptime // 60, ptime % 60) }


[display_template _print_status]
text:
    { printer.display_status.message }


[display_data __voron_display print_status]
position: 3, 0
text:   
    {% if printer.display_status.message %}
      { render("_print_status") }
    {% else %}
      { draw_progress_bar(3, 0, 16, printer.display_status.progress) }
    {% endif %}


[display_data __voron_display printing_time]
position: 1, 9
text: 
    ~gclock~
    { render("_printing_time").strip() }
#####################################################################
# 	Bepper
#####################################################################
# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [time<ms>] [freq<Hz>]
#   time is the tone duration, freq the tone frequency.
# The frequency won't be pitch perfect.


[output_pin BEEPER_pin]
pin: PD5
#   Beeper pin. This parameter must be provided.

pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

[gcode_macro M300]
description: Set Beeper value
gcode:
    # set default parameter value
    {% set freq = params.S|default(440)|float %}
    {% set time = params.P|default(100)|int %}
    {% if S|float != 0 %}
        SET_PIN PIN=_BEEPER VALUE=0.3 CYCLE_TIME={1/freq}
    {% endif %}
    G4 P{time}
    SET_PIN PIN=_BEEPER VALUE=0
